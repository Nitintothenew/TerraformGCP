resource "google_compute_global_address" "private_ip_address" {
    #provider = google-beta
    project = var.project_name
    name          = "global-psconnect-ip"
    purpose       = "VPC_PEERING"
    address_type = "INTERNAL"
    prefix_length = 16
    #network       = google_compute_network.vpc_network.id
    network =  var.vpc_id
}

resource "google_service_networking_connection" "private_vpc_connection" {
    #provider="google-beta"
    #network       = "${google_compute_network.vpc_network.self_link}"
    network = var.vpc_id
    service       = "servicenetworking.googleapis.com"
    reserved_peering_ranges = [google_compute_global_address.private_ip_address.name]
}

resource "random_id" "db_name_suffix" {
  byte_length = 4
}

resource "google_sql_database_instance" "pwc_dev" {
  depends_on       = [google_service_networking_connection.private_vpc_connection]
  #name             = var.name
  name                  = "${var.project_name}-${terraform.workspace}-${var.db_instance_name}-${random_id.db_name_suffix.hex}"
  region           = var.region
  database_version = var.database_version
  deletion_protection  = var.deletion_protection

  settings {
    tier            = "db-custom-4-15360"
    disk_autoresize = var.disk_autoresize
    availability_type = var.availability_type

    ip_configuration {
      ipv4_enabled    = "false"
      private_network = "projects/${var.project_name}/global/networks/${var.network_name}"   
    }
    user_labels = {
    environment = "${terraform.workspace}"
    project = "${var.project_tag}"
    name = "${var.project_tag}-${terraform.workspace}-${var.db_instance_name}"
    managedby = "terraform"

  }
  }
}

resource "google_sql_database" "pwc_dev" {
  name       = var.db_name
  instance   = google_sql_database_instance.pwc_dev.name
  depends_on = [google_sql_user.pwc]
}

resource "random_string" "autogenerated_db_password" {
  length  = 16
  special = false
}

resource "google_sql_user" "pwc" {
  name     = "pwc"
  instance = google_sql_database_instance.pwc_dev.name

  password = var.db_password != "" ? var.db_password : random_string.autogenerated_db_password.result
}







































# resource "random_id" "user-password" {
#   byte_length = 4
# }

# module "sql-db" {
#   source  = "GoogleCloudPlatform/sql-db/google//modules/postgresql"
#   version = "6.0.0"

#   activation_policy =  var.activation_policy
#   availability_type  = var.availability_type
#   database_version =  var.database_version
#   project_id = var.project_name
#   zone = var.zone
#   name = "${var.project_name}-${terraform.workspace}-${var.name}"
#   db_name = var.db_name
#   deletion_protection = var.deletion_protection
#   region = var.region	
#   disk_autoresize = var.disk_autoresize
#   disk_size = var.disk_size
#   disk_type = var.disk_type
#   enable_default_db = var.enable_default_db
#   enable_default_user =  var.enable_default_user
#   read_replica_deletion_protection =  var.read_replica_deletion_protection
#   delete_timeout = var.delete_timeout
#   update_timeout = var.update_timeout
#   create_timeout = var.create_timeout
#   user_password = var.user_password
#   user_name = var.user_name

#   depends_on = [google_service_networking_connection.private_vpc_connection]

#   # maintenance_window {
#   #     day          = var.maintenance_window_day
#   #     hour         = var.maintenance_window_hour
#   #     update_track = var.maintenance_window_update_track
#   #   }

#   backup_configuration = var.backup_configuration
  
#   ip_configuration =  {
#       description = "The ip configuration for the master instances."
#   # type = object({
#   #   authorized_networks = list(map(string))
#   #   ipv4_enabled        = bool
#   #   private_network     = string
#   #   require_ssl         = bool
#   # })
   
#     authorized_networks = []
#     ipv4_enabled        = false
#     private_network =  "projects/${var.project_name}/global/networks/${var.network_name}"    
#     require_ssl         = false
  

#   }




# }


